name: CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,opensim-org,defaults
        channel-priority: strict
        activate-environment: test-env
    
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        conda env update --file environment.yml --name test-env
        conda activate test-env
        conda list
    
    - name: Install package in development mode
      shell: bash -l {0}
      run: |
        conda activate test-env
        pip install -e .
    
    - name: Run tests with coverage
      shell: bash -l {0}
      run: |
        conda activate test-env
        pytest --cov=src/movedb --cov-report=xml --cov-report=term-missing --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage HTML artifact
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11'
      with:
        name: coverage-html
        path: htmlcov/
        retention-days: 30

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        channels: conda-forge,opensim-org,defaults
        channel-priority: strict
        activate-environment: quality-env
    
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        conda env update --file environment.yml --name quality-env
        conda activate quality-env
        conda install -c conda-forge flake8 mypy black isort
    
    - name: Install package
      shell: bash -l {0}
      run: |
        conda activate quality-env
        pip install -e .
    
    - name: Check code formatting with black
      shell: bash -l {0}
      run: |
        conda activate quality-env
        black --check --diff src/ tests/
    
    - name: Check import sorting with isort
      shell: bash -l {0}
      run: |
        conda activate quality-env
        isort --check-only --diff src/ tests/
    
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        conda activate quality-env
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      shell: bash -l {0}
      run: |
        conda activate quality-env
        mypy src/movedb/ --ignore-missing-imports || true

    - name: Install markdownlint
      run: |
        npm install -g markdownlint-cli

    - name: Lint markdown files
      run: |
        markdownlint "**/*.md" --ignore node_modules --ignore .git

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      uses: PyCQA/bandit-action@v1
      with:
        args: '-r src/ -f json -o bandit-report.json'
    
    - name: Upload Bandit scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
        retention-days: 30

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        channels: conda-forge,opensim-org,defaults
        channel-priority: strict
        activate-environment: build-env
    
    - name: Install build dependencies
      shell: bash -l {0}
      run: |
        conda activate build-env
        conda install -c conda-forge conda-build conda-verify build
    
    - name: Build conda package
      shell: bash -l {0}
      run: |
        conda activate build-env
        ./scripts/build_conda.sh
    
    - name: Build Python wheel
      shell: bash -l {0}
      run: |
        conda activate build-env
        python -m build --wheel --outdir dist/wheel
    
    - name: Upload conda package
      uses: actions/upload-artifact@v4
      with:
        name: conda-package
        path: dist/conda/
        retention-days: 30
    
    - name: Upload wheel package
      uses: actions/upload-artifact@v4
      with:
        name: wheel-package
        path: dist/wheel/
        retention-days: 30

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        channels: conda-forge,opensim-org,defaults
        channel-priority: strict
        activate-environment: docs-env
    
    - name: Install documentation dependencies
      shell: bash -l {0}
      run: |
        conda activate docs-env
        conda install -c conda-forge sphinx sphinx-rtd-theme
        pip install -e .
    
    - name: Build documentation
      shell: bash -l {0}
      run: |
        conda activate docs-env
        # If docs/ directory exists with sphinx config
        if [ -d "docs/" ] && [ -f "docs/conf.py" ]; then
          sphinx-build -b html docs/ docs/_build/html
        else
          echo "No sphinx documentation found, skipping..."
        fi
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
        retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test, quality, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        channels: conda-forge,opensim-org,defaults
        channel-priority: strict
        activate-environment: release-env
    
    - name: Install anaconda-client
      shell: bash -l {0}
      run: |
        conda activate release-env
        conda install -c conda-forge anaconda-client
    
    - name: Download conda package
      uses: actions/download-artifact@v4
      with:
        name: conda-package
        path: dist/conda/
    
    - name: Download wheel package
      uses: actions/download-artifact@v4
      with:
        name: wheel-package
        path: dist/wheel/
    
    - name: Upload to Anaconda.org
      shell: bash -l {0}
      run: |
        conda activate release-env
        # Upload conda package to anaconda.org
        echo "Uploading conda packages to Anaconda.org..."
        for pkg in dist/conda/**/*.conda; do
          if [ -f "$pkg" ]; then
            echo "Uploading $pkg..."
            anaconda --token ${{ secrets.ANACONDA_API_TOKEN }} upload --user ${{ secrets.ANACONDA_USER }} "$pkg" --force
          fi
        done
        echo "Upload completed!"
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/conda/**/*.conda
          dist/wheel/**/*.whl
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload:
    name: Upload Package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, quality, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ env.PYTHON_VERSION }}
        channels: conda-forge,opensim-org,defaults
        channel-priority: strict
        activate-environment: upload-env
    
    - name: Install anaconda-client
      shell: bash -l {0}
      run: |
        conda activate upload-env
        conda install -c conda-forge anaconda-client
    
    - name: Download conda package
      uses: actions/download-artifact@v4
      with:
        name: conda-package
        path: dist/conda/
    
    - name: Upload to Anaconda.org (main branch)
      shell: bash -l {0}
      run: |
        conda activate upload-env
        # Upload conda package to anaconda.org
        # For main branch, upload as development version
        echo "Uploading conda packages to Anaconda.org (dev channel)..."
        for pkg in dist/conda/**/*.conda; do
          if [ -f "$pkg" ]; then
            echo "Uploading $pkg to dev channel..."
            anaconda --token ${{ secrets.ANACONDA_API_TOKEN }} upload --user ${{ secrets.ANACONDA_USER }} --label dev "$pkg" --force
          fi
        done
        echo "Upload completed!"
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
